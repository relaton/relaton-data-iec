---
schema-version: v1.2.9
id: ISO/IECTR10182-2016
title:
- content: Information technology
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: title-intro
- content: Programming languages, their environments and system software interfaces
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: title-main
- content: Guidelines for language bindings
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: title-part
- content: Information technology - Programming languages, their environments and
    system software interfaces - Guidelines for language bindings
  language:
  - en
  script:
  - Latn
  format: text/plain
  type: main
link:
- content: https://webstore.iec.ch/publication/24343
  type: src
- content: https://webstore.iec.ch/preview/info_isoiectr10182{ed1.0}en.pdf
  type: obp
type: standard
docid:
- id: ISO/IEC TR 10182:2016
  type: IEC
  primary: true
- id: 'urn:iec:std:iso-iec:10182:2016-03:tr::'
  type: URN
date:
- type: published
  value: '2016-03-10'
contributor:
- organization:
    name:
    - content: International Organization for Standardization
    abbreviation:
      content: ISO
    url: www.iso.org
  role:
  - type: publisher
- organization:
    name:
    - content: International Electrotechnical Commission
    abbreviation:
      content: IEC
    url: www.iec.ch
  role:
  - type: publisher
edition:
  content: '1'
revdate: '2016-03-10'
language:
- en
script:
- Latn
abstract:
- content: "<p>ISO/IEC TR 10182:2016 is based on experience gained in the standardization
    of two major areas in information processing. One area covers programming languages.
    The other area is composed of the services necessary to an application program
    to achieve a goal. The services are divided into coherent groups, each referred
    to as a SYSTEM FACILITY, that are accessed through a FUNCTIONAL INTERFACE. The
    specification of a system facility, referred to as a FUNCTIONAL SPECIFICATION,
    defines a collection of SYSTEM FUNCTIONS, each of which carries out some well-defined
    service.</p><p>Since in principle there is no reason why a particular system facility
    should not be used<strong>by</strong> a program, regardless of the language in
    which is written, is the practice of system facility specifiers to define an 'abstract'
    functional interface that is language independent. In this way, the concepts in
    a particular system facility may be refined by experts in that area without regard
    for language peculiarities. An internally coherent view of a particular system
    facility is defined, relating the system functions to each other in a consistent
    way and relating the system functions to other layers within the system facility,
    including protocols for communication with other objects in the total system.</p><p>However,
    if these two areas are standardized independently, it is not possible to guarantee
    that programs from one operating environment can be moved to another, even if
    the programs are written in a standard programming language and use only standard
    system facilities. A language binding of a system facility to a programming language
    provides language syntax that maps the system facility's functional interface.
    This allows a program written in the language to access the system functions constituting
    the system facility in a standard way. The purpose of a language binding is to
    achieve portability of a program that uses particular facilities in a particular
    language. Examples of system facilities that have had language bindings developed
    for them are GKS, NDL, and SQL (see Clause 3). It is anticipated that further
    language binding development will be required. Some system facilities currently
    being standardized have no language bindings and additional system facilities
    will be standardized. There is a possibility of n Ã— m language bindings, where
    n is the number of languages and m the number of system facilities.</p><p>The
    scope of this Technical Report is to classify language binding methods, reporting
    on particular instances in detail, and to produce suggested guidelines for future
    language binding standards.</p><p>Note that the language bindings and the abstract
    facility interfaces must have a compatible run time representation, but the abstract
    facility does not necessarily have to be written in the host language. For example,
    if the application program is using a Pascal language binding and the corresponding
    facility is written in FORTRAN, there must be a compatible run time representation
    in that operating environment. How this compatibility is achieved is outside the
    scope of these guidelines. This is generally a property of the operating environment
    defined by the implementor, and is reviewed briefly in this Technical Report.</p>"
  language:
  - en
  script:
  - Latn
  format: text/html
docstatus:
  stage:
    value: PUBLISHED
copyright:
- owner:
  - name:
    - content: International Organization for Standardization
    abbreviation:
      content: ISO
    url: www.iso.org
  - name:
    - content: International Electrotechnical Commission
    abbreviation:
      content: IEC
    url: www.iec.ch
  from: '2016'
place:
- Geneva
doctype:
  type: technical-report
editorialgroup:
  technical_committee:
  - name: ISO/IEC JTC 1/SC 22
    number: 1
    type: technicalCommittee
ics:
- code: '35.060'
  text: Languages used in information technology
structuredidentifier:
  project_number: TR
  type: IEC
ext:
  schema-version: v1.0.0
price_code: iso:ZZ
